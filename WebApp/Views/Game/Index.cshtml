@model WebApplication1.Models.GameViewModel
@{
    ViewBag.Title = "Playing..";
    Layout = "~/Views/Shared/_LayoutFull.cshtml";
}
<style>
    .error {color:red;}
</style>

<link rel="stylesheet" href="@Url.Content("~/Content/proxy.css")" />

<div class="game">

    <div class="nav-space"></div>
    <div class="players"></div>

    <div class="turn">
        <div id="turnOrder"></div>
        <div id="steps"></div>
    </div>


    <div id="preview">
        @{Html.RenderAction("Template", "Game");}
    </div>

    <div id="requests">
        <div id="selectType">Select deck</div>
        <div id="selection">
            <div id="selectRole">
                <select>
                    <option value="0">Player 1 - Blessed</option>
                    <option value="1">Player 2 - Cursed</option>
                </select>
                <input type="button" id="startNewGame" value="Start Game" />
            </div>
        </div>
    </div>
    
    <div id="gameLog">
        <ul id="messages"></ul>
    </div>
</div>

<!--Script references. -->
<!--Reference the jQuery library. -->
<script src="/Scripts/jquery-1.10.2.min.js"></script>
<!--Reference the SignalR library. -->
<script src="/Scripts/jquery.signalR-2.2.0.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="/signalr/hubs"></script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">

    document.addEventListener('keydown', function (e) {

        var key = keys[e.which];
        if (key) {
            e.preventDefault();
        }

        if (key === 'F2') {
            Reply('');
        }
    });
    var keys = {
        9: "tab",
        13: "enter",
        16: "shift",
        18: "alt",
        27: "esc",
        33: "rePag",
        34: "avPag",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12"
    }

    function addPlayer(view) {
        var id = '#id_' + view.Id;
        $('.players').append('<div class="player" id="id_' + view.Id + '"></div>');

        $(id).append('<span class="Name">-1</span>');
        $(id).append('<span class="LibraryCount">-1</span>');
        $(id).append('<span class="HandCount">-1</span>');
        $(id).append('<span class="Life">-1</span>');

        $(id).append('<ul class="Battlefield"></ul>');
        $(id).append('<ul class="Hand"></ul>');
        $(id).append('<ul class="Exile"></ul>');
        $(id).append('<ul class="Command"></ul>');
        $(id).append('<ul class="Graveyard"></ul>');

        UpdatePlayerView(view);
    }

    function draw(view) {
        UpdateView(view);
    }

    function setLife(json) {
        UpdatePlayerView(json.PlayerView);
    }

    function TurnOrder(data) {
        $('turnOrder').empty();
        $.each(data.TurnOrder, function (key, val) {
            $('.turnOrder').append('<li>' + val + '</li>');
        });

        $('#steps').empty();
        $.each(data.Steps, function (key, val) {
            $('#steps').append('<span class="step" id="step_' + val + '">' + val + '</span> ');
        });
    }

    function moveCard(card) {
        var id = '#id_' + card.Remove;
        $(id).remove();
        UpdateView(card.View);
    }

    function BeginStep(view) {
        $('.step').css('background-color', '#ccc');
        $('#step_' + view.CurrentStep).css('background-color', '#cfc');
    }

    function Priority(data) {
        var id = '#id_' + data.Id;
        
        data.Player;
    }

    function TakeAction(info) {
        $('#selectType').text(info.Type);
        $('#selection').empty();
        $.each(info.Selection, function (key, val) {
            //  get name from some list..
            var id = $('#id_' + val);
            
            var name = $(id).text();

            if (name == '') {
                console.error('Unable to find card: ' + val);
                name = val;
            }
            else {
                $(id).append('<button class="reqButton" onClick="Reply(' + key + ')">Use</button> ');
            }

            $('#selection').append('<button class="reqButton" onClick="Reply(' + key + ')">' + name + '</button> ');
        });
    }

    function BeginTurn(view) {
        var id = '#id_' + view.ActivePlayer;
        $('.player').css('background-color', '#ccc');
        $(id).css('background-color', '#cfc');

        $('#messages').append('<b>Turn ' + view.TurnNumber + ', ' + $(id + ' .Name').text() + '</b><br />');
    }

    function FlushView(view) {
        $.each(view.Players, function (key, p) {
            var id = '#id_' + p.Id;
            $(id + ' .Hand').empty();
            $(id + ' .Battlefield').empty();
            $(id + ' .Graveyard').empty();
            $(id + ' .Exile').empty();
            $(id + ' .Command').empty();
        });

        UpdateView(view);
    }

    function UpdateView(view) {
        $.each(view.Players, function (key, val) {
            UpdatePlayerView(val);
        });
    }

    function UpdatePlayerView(view) {
        var id = '#id_' + view.Id;
        $.each(view, function (key, val) {
            if (key == 'Life')
                $(id + ' .Life').text(val);
            if (key == 'Name')
                $(id + ' .Name').text(val);
            if (key == 'HandCount')
                $(id + ' .HandCount').text(val);
            if (key == 'LibraryCount')
                $(id + ' .LibraryCount').text(val);

            if (key == 'Hand' || key == 'Battlefield' || key == 'Graveyard' || key == 'Exile' || key == 'Command')
                UpdateField(id + ' .' + key, val)

        });
    }

    function UpdateField(field, view) {
        $.each(view, function (key, card) {
            $(field).append('<li id="id_' + card.Id + '">' + card.Name + '</li>');
        });
    }

    function Reply(data) {
        var chat = $.connection.chatHub;
        chat.server.send(data);
        $('.reqButton').remove();
    }


    $(function () {


        var chat = $.connection.chatHub;

        chat.client.broadcastMessage = function (name, data) {
            console.log(data);
            var obj = jQuery.parseJSON(data);

            $.each(obj, function (key, val) {

                if (key == 'Message')
                    $('#messages').append('<li>' + val.Text + '</li>');

                else if (key == 'Error')
                    $('#messages').append('<li class="error">' + val.Text + '</li>');

                else if (key == 'Draw')
                    draw(val.View);

                else if (key == 'AddPlayer')
                    addPlayer(val.View.Players[0]);

                else if (key == 'SetLife')
                    UpdatePlayerView(val.View.Players[0]);

                else if (key == 'BeginTurn')
                    BeginTurn(val.View);

                else if (key == 'Move')
                    moveCard(val);

                else if (key == 'View')
                    FlushView(val.View);

                else if (key == 'Priority')
                    Priority(val);

                else if (key == 'TurnOrder')
                    TurnOrder(val.View);

                else if (key == 'BeginStep')
                    BeginStep(val.View);

                else if (key == 'TakeAction' && val.Type == 'Interaction')
                    ActivateCard(val);

                else if (key == 'TakeAction')
                    TakeAction(val);

                else $.each(val, function (key2, val2) {
                    var encodedName = $('<div />').text(name).html();
                    var encodedMsg = $('<div />').text(key + ' :: ' + key2 + ' : ' + val2).html();
                    $('#messages').append('<li><strong>' + encodedName
                        + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
                });

            });

            $("#gameLog").scrollTop($("#gameLog")[0].scrollHeight);
        };

        function connectionStateChanged(state) {
            var stateConversion = { 0: 'connecting', 1: 'connected', 2: 'reconnecting', 4: 'disconnected' };
            console.log('SignalR state changed from: ' + stateConversion[state.oldState]
             + ' to: ' + stateConversion[state.newState]);
        }

        $.connection.hub.start().done(function () {
            $('#startNewGame').click(function () {
                chat.server.setPlayer($('#selectRole option:selected').val());
                chat.server.startNew();
            });
        })
        .fail(function () {
            alert("Could not Connect!");
        });
    
        $.connection.hub.disconnected(function () {
            console.log('Connection disconnected');

            setTimeout(function () {
                $.connection.hub.start();
            }, 5000); // Re-start connection after 5 seconds
        });


    });
</script>
